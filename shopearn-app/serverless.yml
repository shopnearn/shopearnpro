service: shopearn

custom:
  #  customDomains:
  #    - http:
  #        stage: ${sls:stage}
  #        domainName: ${sls:stage}-${sls:instanceId}.${self:custom.domain}
  #        basePath: ''
  #        apiType: http
  #        endpointType: REGIONAL
  pythonRequirements:
    invalidateCaches: true
    pycache: false
    strip: true
    slim: true
    slimPatterns:
      - '**/__pycache__/**'
      - '**/licenses/**'
      - '**/*.egg-info*'
      - '**/*.exe'
    slimPatternsAppendDefaults: false
  stage: ${opt:stage, 'dev'}
  stageCap:
    dev: Dev
    dev1: Dev1
    dev2: Dev2
    qa: Qa
    uat: Uat
    prod: Prod
  stageName: ${self:custom.stageCap.${self:custom.stage}}
  prune:
    automatic: true
    number: 3
  scripts:
    hooks:
      after:deploy:finalize: serverless invoke --function init --aws-profile ${param:awsProfile} --stage ${self:custom.stage}
  userPoolName: ${self:service}-user-pool${param:stageSuffix}
  userPoolId:
    Ref: CognitoUserPool
  userPoolClientName: ${self:service}-user-pool-client${param:stageSuffix}
  userPoolClientId:
    Ref: CognitoUserPoolClient
  domain: shopearnpro.com
  power_tools_layer: ${file(config.yml):AWSLambdaPowerToolsLayerARM}
  db_table: Market${param:stageSuffixCap}

provider:
  name: aws
  region: us-east-1
  runtime: python3.13
  architecture: arm64
  logRetentionInDays: 14
  memorySize: 128
  timeout: 8
  iam:
    role:
      statements: ${file(iamroles/default-role.yml)}
  tracing:
    lambda: true
    apiGateway: true
  logs:
    httpApi: true
  httpApi:
    payload: '2.0'
    metrics: true
    description: ${self:service} API Gateway (${self:custom.stageName})
    disableDefaultEndpoint: false
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ""
            - - "https://cognito-idp."
              - ${self:provider.region}
              - ".amazonaws.com/"
              - ${self:custom.userPoolId}
        audience:
          - ${self:custom.userPoolClientId}
        type: jwt
  environment:
    LOG_LEVEL: INFO
    STAGE: ${sls:stage}
    APP_CONFIG: 'TODO'
    USERPOOL_ID: ${self:custom.userPoolId}
    POWERTOOLS_LOGGER_LOG_EVENT: true
    POWERTOOLS_SERVICE_NAME: ${self:app}
    POWERTOOLS_METRICS_NAMESPACE: shopnearn
    POWERTOOLS_TRACER_CAPTURE_RESPONSE: true
    POWERTOOLS_TRACER_CAPTURE_ERROR: true
    MARKET_TABLE: ${self:custom.db_table}

functions:
  init:
    handler: init.handler
    module: lambda/init
    description: Application init logic (${self:custom.stageName})
    iamRoleStatementsName: lambda-init-role${param:stageSuffix}
    iamRoleStatements: ${file(iamroles/lambda-init-role.yml)}
    timeout: 900
    package:
      patterns:
        - 'lambda/init/*'
  cart:
    handler: index.handler
    module: lambda/cart
    description: Shopping cart service (${self:custom.stageName})
    iamRoleStatementsName: lambda-cart-role${param:stageSuffix}
    iamRoleStatements: ${file(iamroles/lambda-cart-role.yml)}
    memorySize: 256
    layers:
      - ${self:custom.power_tools_layer}
      - !Ref AppLambdaLayer
    package:
      patterns:
        - 'lambda/cart/*'
    events:
      - httpApi:
          path: /cart/{proxy+}
          method: any
          #authorizer:
          #  name: cognitoAuthorizer
  calc:
    handler: index.handler
    module: lambda/calc
    description: Bonus calculation logic (${self:custom.stageName})
    iamRoleStatementsName: lambda-calc-role${param:stageSuffix}
    iamRoleStatements: ${file(iamroles/lambda-calc-role.yml)}
    ephemeralStorageSize: 512
    timeout: 5
    url: false
    layers:
      - ${self:custom.power_tools_layer}
      - !Ref AppLambdaLayer
    package:
      patterns:
        - 'lambda/calc/*'
    events:
      - httpApi:
          path: /calc/{proxy+}
          method: any
  stream:
    handler: market.processor
    module: lambda/stream
    description: Market table stream processor (${self:custom.stageName})
    iamRoleStatementsName: lambda-ddb-stream-role${param:stageSuffix}
    iamRoleStatements: ${file(iamroles/lambda-ddb-stream-role.yml)}
    layers:
      - ${self:custom.power_tools_layer}
      - !Ref AppLambdaLayer
    package:
      patterns:
        - 'lambda/stream/market.*'
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ MarketTable, StreamArn ]

layers:
  app: # AppLambdaLayer
    path: app-layer
    name: app-layer${param:stageSuffix}
    description: Application lambda layer (${self:custom.stageName})
    package:
      patterns:
        - '**/*.py'
        - '**/*.typed'
        - '**/METADATA'
    compatibleRuntimes:
      - python3.13
    compatibleArchitectures:
      - arm64
    allowedAccounts:
      - '*'
    retain: false

stepFunctions:
  validate: true
  stateMachines:
    ${file(statemachines/state-machines.yml)}

resources:
  - Description: ShopEarnPro Application (${self:custom.stageName})
  - Resources: ${file(buckets/site-bucket.yml)}
  - Resources: ${file(statemachines/log-group.yml)}
  - Resources: ${file(cognito/userpool.yml)}
  - Resources: ${file(dbtables/market-table.yml)}
  # - Resources: ${file(cloudfront/cloudfront.yml)}
  - Outputs:
      Domain:
        Description: "Site URL"
        Value: "https://${param:domain}"

stages:
  default:
    params:
      stageSuffix: '-${self:custom.stage}'
      stageSuffixCap: ${self:custom.stageName}
      awsProfile: ${opt:aws-profile,"shopnearn-${sls:stage}"}
      domain: ${sls:stage}-${sls:instanceId}.${self:custom.domain}
      siteBucket: shopearn-${sls:stage}.s3.amazonaws.com
  prod:
    params:
      stageSuffix: ''
      stageSuffixCap: ''
      awsProfile: ${opt:aws-profile}
      domain: app.${self:custom.domain}
      siteBucket: shopearn.s3.amazonaws.com

package:
  individually: true
  patterns:
    - '!**'

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements
  # - serverless-domain-manager
  - serverless-step-functions
  - serverless-plugin-scripts
  - serverless-prune-plugin

app: ${self:service}-app-${sls:stage}
org: sapientum8
