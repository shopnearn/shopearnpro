service: service-cart

custom:
  pythonRequirements:
    invalidateCaches: true
    pycache: false
    strip: true
    slim: true
    slimPatterns:
      - '**/__pycache__/**'
      - '**/licenses/**'
      - '**/*.egg-info*'
      - '**/*.exe'
    slimPatternsAppendDefaults: false
  domain: shopearnpro.com
  s3_role_resource: arn:aws:iam::${aws:accountId}:role/s3-access-role
  power_tools_layer: ${file(./config.json):AWSLambdaPowerToolsLayerARM}

provider:
  name: aws
  region: us-east-1
  runtime: python3.13
  architecture: arm64
  memorySize: 128
  timeout: 8
  iam: ${file(iamroles.yml)}
  httpApi:
    payload: '2.0'
    metrics: true
    disableDefaultEndpoint: false
  environment:
    DB_TABLE: Market_${sls:stage}
    LOG_LEVEL: INFO
    VAR1: ${file(./config.${sls:stage}.json):VAR1}

functions:
  cart:
    handler: index.handler
    module: lambda/cart
    memorySize: 256
    layers:
      - !Ref DataLambdaLayer
      - ${self:custom.power_tools_layer}
    package:
      patterns:
        - lambda/cart/*.*
    events:
      - httpApi:
          path: /cart
          method: get
      - httpApi:
          path: /cart/{id}
          method: any
  calc:
    handler: index.handler
    module: lambda/calc
    timeout: 10
    url: true
    layers:
      - !Ref DataLambdaLayer
    package:
      patterns:
        - lambda/calc/*.*
    events:
      - httpApi:
          path: /view
          method: get
      - httpApi:
          path: /write
          method: get
      - httpApi:
          path: /calc/{id}
          method: get

layers:
  data: # DataLambdaLayer
    path: layer-data
    name: layerData-${sls:stage}
    description: Base lambda layer for ${sls:stage} environment
    package:
      patterns:
        - '**/*.py'
        - '**/*.typed'
        - '**/METADATA'
    compatibleRuntimes:
      - python3.13
    compatibleArchitectures:
      - arm64
    allowedAccounts:
      - '*'
    retain: false

stages:
  default:
    params:
      domain: ${sls:stage}.shopearnpro.com
  prod:
    params:
      domain: shopearnpro.com

resources:
  - Description: "shopnearn service application"
  - ${file(dbtable.yml)}
  - Outputs:
      Domain:
        Description: "shopnearn url link"
        Value: "https://${sls:stage}.${self:custom.domain}"

package:
  individually: true
  exclude:
    - '**'

plugins:
  - serverless-python-requirements

app: shopnearn-${sls:stage}
org: sapientum8
