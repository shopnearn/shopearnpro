# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sapientum8
service: service-cart

custom:
  domain: shopearnpro.com
  s3_role_resource: arn:aws:iam::${aws:accountId}:role/s3-access-role

stages:
  default:
    params:
      domain: ${sls:stage}.shopearnpro.com
  prod:
    params:
      domain: shopearnpro.com

provider:
  name: aws
  runtime: python3.13
  architecture: x86_64
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ MarketTable, Arn ]
        - Effect: Allow
          Action:
            - s3:*
          Resource: ${self:custom.s3_role_resource}
  environment:
    DB_TABLE: Market_${sls:stage}
    LOG_LEVEL: INFO
    VAR1: ${file(./config.${sls:stage}.json):VAR1}

package:
  individually: true
  include:
    - '!./**'
    - './lambda/cart/*.py'
    - './lambda/page/*.py'
    - './layers/data/*.py'
  exclude:
    - '**'

functions:
  cart:
    handler: index.handler
    module: lambda/cart
    snapStart: true
    layers:
      - !Ref DataLambdaLayer
    package:
      patterns:
        - lambda/cart/*.py
      exclude:
        - '**'
    events:
      - httpApi:
          path: /cart
          method: get
      -  httpApi:
          path: /cart/{id}
          method: get
      - httpApi:
          path: /cart/{id}
          method: post
      - httpApi:
          path: /cart/{id}
          method: put
      - httpApi:
          path: /cart/{id}
          method: delete
  page:
    handler: index.handler
    module: lambda/page
    package:
      patterns:
        - lambda/page/*.py
      exclude:
        - '**'
    events:
      - httpApi:
          path: /page
          method: get

resources:
  - Resources:
      MarketTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: pk
              AttributeType: S
            - AttributeName: sk
              AttributeType: S
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: sk
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: Market_${sls:stage}
  - ${file(cloudform.yml)}
  - Outputs:
      Domain:
        Value: "https://${sls:stage}.${self:custom.domain}"

layers:
  data: # DataLambdaLayer
    path: layer-data
    name: layerData-${sls:stage}
    description: DataLambdaLayer for ${sls:stage} environment
    package:
      patterns:
        - '**/*.py'
      exclude:
        - '**'
    compatibleRuntimes:
      - python3.13
    compatibleArchitectures:
      - x86_64
      - arm64
    allowedAccounts:
      - '*'
    retain: false

plugins:
  - serverless-python-requirements
